@page "/"
@page "/login"

@using ConferApp.Shared.Authentication.Requests
@using ConferApp.Shared.Authentication.Responses
@using Microsoft.AspNetCore.Components.Authorization

@inject NotificationService RadzenNotificationService
@inject DialogService RadzenDialogService

@if (ShowLoad)
{
    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Dark" 
        Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}

<EditForm Model="LoginRequest" OnValidSubmit="OnLogin">
    <DataAnnotationsValidator />
    <div class="container mt-5 d-flex justify-content-center">
        <div class="card" style="width: 500px">
            <div class="card-header">
                <h2>Вход</h2>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Введите Email</label>
                    <RadzenTextArea @bind-Value="LoginRequest.Email" Placeholder="Введите адрес электронной почты" />
                    <ValidationMessage For="() => LoginRequest.Email" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Введите Пароль</label>
                    <RadzenPassword @bind-Value="LoginRequest.Password" class="form-control" Placeholder="Введите пароль" AutoComplete="false" />
                    <ValidationMessage For="() => LoginRequest.Password" />
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success btn-sm">Войти</button>
            </div>
        </div>
    </div>
</EditForm>

@code{
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool ShowLoad = false;

    private LoginUserRequest LoginRequest = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ShowLoad = false;
            bool isAuthenticated = (await AuthenticationState!).User.Identity!.IsAuthenticated;
            if (isAuthenticated)
                NavManager.NavigateTo(NavManagerConfig.DashboardUrl);
        }
        catch (Exception ex)
        {
            ShowNotification(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = "ПРОИЗОШЛО ИСКЛЮЧЕНИЕ",
                Detail = "Во время проверки статуса аутентификации произошла ошибка!", 
                Duration = 5000
            });
        }
    }

    private async Task OnLogin()
    {
        ShowLoad = true;
        await Task.Delay(1000);

        LoginUserResponse? response = await AuthService.Login(LoginRequest);
        if (!response!.Success)
        {
            string token = response!.AccessToken;
            await AuthStateProvider.SetUserAuthenticated(token);
            NavManager.NavigateTo(NavManagerConfig.DashboardUrl);
            return;
        }

        ShowLoad = false;
        await RadzenDialogService.OpenAsync("Произошла проблема с аутентификацией!", ds =>
            @<RadzenCard Variant="Variant.Filled" class="rz-my-12 rz-mx-auto" Style="max-width:360px">
                <RadzenText TextStyle="TextStyle.Body1"><b>@(response!.Message!)</b></RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Попробовать снова" Click="() => DialogOk(ds, navigateToRegistration: false)" ButtonStyle="ButtonStyle.Warning" />
                    <RadzenButton Text="Зарегистрироваться" Click="() => DialogOk(ds, navigateToRegistration: true)" ButtonStyle="ButtonStyle.Info" />
                </RadzenStack>
            </RadzenCard>, new DialogOptions { ShowClose=false, CloseDialogOnOverlayClick=true, CloseDialogOnEsc=true });
        //StateHasChanged();
    }

    private void DialogOk(DialogService ds, bool navigateToRegistration)
    {
        ds.Close();
        if (navigateToRegistration)
            NavManager.NavigateTo(NavManagerConfig.RegistrationUrl);
        else
            StateHasChanged();
    }

    private void ShowNotification(NotificationMessage message)
    {
        RadzenNotificationService.Notify(message);

        //TODO (maybe?): add message to database of errors occured
    }
}