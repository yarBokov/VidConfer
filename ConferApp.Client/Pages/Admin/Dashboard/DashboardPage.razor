@page "/dashboard"
@using ConferApp.Client.States
@using ConferApp.Shared.Meetings.Requests
@using ConferApp.Shared.Meetings.Responses
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@implements IDisposable

@inject DialogService RadzenDialogService

@if (ShowLoading)
{
    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Dark"
            Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}

@code {
    [Inject]
    private NavigationState? NavState { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    private bool IsMeetingModalOpen = false;

    private string RecentMeetingStatus = string.Empty;
    private string MeetingStatus = string.Empty;

    private bool ShowMessageDialog = false;
    private bool ShowLoading = false;

    private MeetingModel Meeting = new();

    private IEnumerable<GetMeeting> Meetings = [];
    private IEnumerable<GetMeeting> RecentMeetings = [];

    private string HostId = string.Empty;

    private class MeetingModel
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateOnly? StartDate { get; set; }
        public DateTime? StartTime { get; set; }
        public DateOnly? EndDate { get; set; }
        public DateTime? EndTime { get; set; }
    }

    protected async override Task OnInitializedAsync()
    {
        if (!(await AuthState!).User.Identity!.IsAuthenticated)
            NavManager.NavigateTo("/");

        NavState!.BtnAction += ScheduleMeeting;
        ShowLoading = true;
        await Task.Delay(500);

        HostId = (await AuthState!).User.Claims
            .FirstOrDefault(claim => claim.Type == ClaimTypes.NameIdentifier)!.Value;

        if (string.IsNullOrEmpty(HostId))
            return;

        await GetMeetingsAsync();
        await GetRecentMeetingsAsync();
        ShowLoading = false;
    }

    private async Task GetMeetingsAsync()
    {
        GetMeetingsResponse? meetingsResponse = await MeetingService.GetMeetingsAsync(HostId);
        if (meetingsResponse!.Success)
            Meetings = meetingsResponse.Data!;
        else
            MeetingStatus = meetingsResponse.Message!;
    }

    private async Task GetRecentMeetingsAsync()
    {
        GetRecentMeetingsResponse? meetingsResponse = await MeetingService.GetRecentMeetingsAsync(HostId);
        if (meetingsResponse!.Success)
            RecentMeetings = meetingsResponse.Data!;
        else
            RecentMeetingStatus = meetingsResponse.Message!;
    }

    private async Task SubmitMeeting()
    {
        IsMeetingModalOpen = false;
        ShowLoading = true;
        await Task.Delay(1000);
        CreateMeetingRequest meetingRequest = new()
        {
            Title = Meeting.Title,
            Description = Meeting.Description,
            StartDate = DateOnly.FromDateTime(Meeting.StartDate!.Value).ToString(),
            StartTime = TimeOnly.FromDateTime(Meeting.StartTime!.Value).ToString(),
            EndDate = DateOnly.FromDateTime(Meeting.EndDate!.Value).ToString(),
            EndTime = TimeOnly.FromDateTime(Meeting.EndTime!.Value).ToString(),
            HostId = (await AuthState!).User.Claims
                .FirstOrDefault(claim => claim.Type == ClaimTypes.NameIdentifier)!.Value)
        };

        CreateMeetingResponse? meetingResponse = await MeetingService.CreateMeetingAsync(meetingRequest);

        if (meetingResponse!.Success)
        {
            Meeting = new();
            meetingRequest = new();
            await GetMeetingsAsync();
        }

        ShowLoading = false;
        ShowMessageDialog = true;
        await RadzenDialogService.OpenAsync("Произошла проблема во время создания видеовстречи!", ds =>
            @<RadzenCard Variant="Variant.Filled" class="rz-my-12 rz-mx-auto" Style="max-width:360px">
                    <RadzenText TextStyle="TextStyle.Body1"><b>@(meetingResponse!.Message!)</b></RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Попробовать снова" Click="() => DialogOk(ds)" ButtonStyle="ButtonStyle.Warning" />
                    </RadzenStack>
            </RadzenCard>
        );
    }

    private void DialogOk(DialogService ds)
    {
        ShowMessageDialog = false;
        ds.Close();
        StateHasChanged();
    }

    private void Ok()
    {
        ShowMessageDialog = false;
        StateHasChanged();
    }

    private void CancelMeetingCreation()
    {
        IsMeetingModalOpen = false;
        Meeting = new();
    }

    private void ResetMeetingForm() => Meeting = new();

    private async Task StartMeeting(string meetingId)
    {
        ShowLoading = true;
        await Task.Delay(500);
        NavManager.NavigateTo(string.Format(NavManagerConfig.MeetingUrlFormat, meetingId));
    }

    public void Dispose() => NavState!.BtnAction -= StateHasChanged;

    private void ScheduleMeeting() => OpenModal();
    private void OpenModal() => IsMeetingModalOpen = true;
}